AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
    messenger

    Sample SAM Template for messenger

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
    Function:
        Timeout: 3

Resources:
    # userpool
    UserPool:
        Type: "AWS::Cognito::UserPool"
        Properties:
            UserPoolName: messenger-user-pool
            AutoVerifiedAttributes:
                - email
            UsernameConfiguration:
                CaseSensitive: true
            Schema:
                - Name: email
                  AttributeDataType: String
                  Mutable: false
                  Required: true
                - Name: name
                  AttributeDataType: String
                  Mutable: true
                  Required: true
            LambdaConfig:
                PostConfirmation: !GetAtt PostConfirmationFunction.Arn
    UserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
            UserPoolId: !Ref UserPool
            ClientName: messenger-user-pool-client
            GenerateSecret: false

    #  websocket
    WebSocketApiGateway:
        Type: AWS::ApiGatewayV2::Api
        Properties:
            Name: WebSocketApi
            ProtocolType: WEBSOCKET
            RouteSelectionExpression: $request.body.action

    ConnectRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref WebSocketApiGateway
            RouteKey: $connect
            AuthorizationType: NONE
            OperationName: ConnectRoute
            Target: !Join
                - "/"
                - - "integrations"
                  - !Ref ConnectInteg
    ConnectInteg:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            ApiId: !Ref WebSocketApiGateway
            IntegrationType: AWS_PROXY
            IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations

    OnConnectFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/lambda/onConnect
            Handler: app.connectHandler
            Runtime: nodejs18.x

    OnConnectPermission:
        Type: AWS::Lambda::Permission
        DependsOn:
            - WebSocketApiGateway
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref OnConnectFunction
            Principal: apigateway.amazonaws.com

    PostConfirmationFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/lambda/postConfirmation
            Handler: app.postConfirmationHandler
            Runtime: nodejs18.x
            Role: !GetAtt FunctionRole.Arn

    PostConfirmationPermissions:
        Type: AWS::Lambda::Permission
        DependsOn:
            - ServerlessRestApi
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref PostConfirmationFunction
            Principal: apigateway.amazonaws.com

    # // create user function

    HelloWorldFunction:
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            CodeUri: src/
            Handler: app.lambdaHandler
            Runtime: nodejs18.x
            Architectures:
                - x86_64
            AutoPublishAlias: live
            DeploymentPreference:
                Type: Canary10Percent5Minutes
            Events:
                HelloWorld:
                    Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
                    Properties:
                        Path: /hello
                        Method: get
        Metadata: # Manage esbuild properties
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: es2020
                Sourcemap: true
                EntryPoints:
                    - app.ts

    UsersTable:
        Type: AWS::DynamoDB::Table
        Properties:
            AttributeDefinitions:
                - AttributeName: cognitoid
                  AttributeType: S
            KeySchema:
                - AttributeName: cognitoid
                  KeyType: HASH
            BillingMode: PAY_PER_REQUEST
    ConnectionsTable:
        Type: AWS::DynamoDB::Table
        Properties:
            AttributeDefinitions:
                - AttributeName: cognitoid
                  AttributeType: S
            KeySchema:
                - AttributeName: cognitoid
                  KeyType: HASH
            BillingMode: PAY_PER_REQUEST

    FunctionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: lambda.amazonaws.com
                      Action: sts:AssumeRole
            Policies:
                - PolicyName: DynamoDBAccess
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - dynamodb:PutItem
                                - logs:CreateLogGroup
                                - logs:CreateLogStream
                                - logs:PutLogEvents
                                - lambda:InvokeFunction
                            Resource: "*"

    ApplicationResourceGroup:
        Type: AWS::ResourceGroups::Group
        Properties:
            Name:
                Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
            ResourceQuery:
                Type: CLOUDFORMATION_STACK_1_0
    ApplicationInsightsMonitoring:
        Type: AWS::ApplicationInsights::Application
        Properties:
            ResourceGroupName:
                Ref: ApplicationResourceGroup
            AutoConfigurationEnabled: "true"

Outputs:
    # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
    # Find out more about other implicit resources you can reference within SAM
    # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
    HelloWorldApi:
        Description: API Gateway endpoint URL for Prod stage for Hello World function
        Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
    HelloWorldFunction:
        Description: Hello World Lambda Function ARN
        Value: !GetAtt HelloWorldFunction.Arn
    HelloWorldFunctionIamRole:
        Description: Implicit IAM Role created for Hello World function
        Value: !GetAtt HelloWorldFunctionRole.Arn
    WebSocketApiEndpoint:
        Description: WebSocket API endpoint URL
        Value: !Sub "wss://${WebSocketApiGateway}.execute-api.${AWS::Region}.amazonaws.com/"
    OnConnectFunctionArn:
        Description: "OnConnect function ARN"
        Value: !GetAtt OnConnectFunction.Arn
    UserPoolId:
        Description: Messenger userpool ID
        Value: !Ref UserPool
    UserPoolClientId:
        Description: Messenger userpool client ID
        Value: !Ref UserPoolClient
    PostConfirmationFunction:
        Description: Function that runs after the confirmation step of cognito sign up
        Value: !Ref PostConfirmationFunction
