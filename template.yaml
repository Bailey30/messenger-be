AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
    messenger

    Sample SAM Template for messenger

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
    Function:
        Timeout: 3

Resources:
    # userpool
    UserPool:
        Type: "AWS::Cognito::UserPool"
        Properties:
            UserPoolName: messenger-user-pool
            AutoVerifiedAttributes:
                - email
            UsernameConfiguration:
                CaseSensitive: true
            Schema:
                - Name: email
                  AttributeDataType: String
                  Mutable: false
                  Required: true
                - Name: name
                  AttributeDataType: String
                  Mutable: true
                  Required: true
            LambdaConfig:
                PostConfirmation: !GetAtt PostConfirmationFunction.Arn
                CustomMessage: !GetAtt CustomVerificationEmailFunction.Arn
    UserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
            UserPoolId: !Ref UserPool
            ClientName: messenger-user-pool-client
            GenerateSecret: false
            # AllowedOAuthFlows:
            #     - code
            #     - implicit
            # ExplicitAuthFlows:
            #     - ALLOW_USER_SRP_AUTH
            #     - ALLOW_REFRESH_TOKEN_AUTH
            # AllowedOAuthScopes:
            #     - email
            #     - openid
            #     - profile
            #     - aws.cognito.signin.user.admin

    #  websocket
    WebSocketApiGateway:
        Type: AWS::ApiGatewayV2::Api
        Properties:
            Name: WebSocketApi
            ProtocolType: WEBSOCKET
            RouteSelectionExpression: $request.body.action
    WebSocketAuthorizer:
        Type: AWS::ApiGatewayV2::Authorizer
        Properties:
            ApiId: !Ref WebSocketApiGateway
            AuthorizerType: REQUEST
            Name: !Sub "${AWS::StackName}-WebSocketAuthorizer"
            AuthorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerFunction.Arn}/invocations"
            IdentitySource:
                - route.request.querystring.token

    ConnectRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref WebSocketApiGateway
            RouteKey: $connect
            OperationName: ConnectRoute
            Target: !Join
                - "/"
                - - "integrations"
                  - !Ref ConnectInteg
            AuthorizationType: CUSTOM
            AuthorizerId: !Ref WebSocketAuthorizer


    ConnectInteg:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            ApiId: !Ref WebSocketApiGateway
            IntegrationType: AWS_PROXY
            IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations

    DisconnectRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref WebSocketApiGateway
            RouteKey: $disconnect
            AuthorizationType: NONE
            OperationName: DisconnectRoute
            Target: !Join
                - "/"
                - - "integrations"
                  - !Ref DisconnectInteg
    DisconnectInteg:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            ApiId: !Ref WebSocketApiGateway
            IntegrationType: AWS_PROXY
            IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations

    SendMessageRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref WebSocketApiGateway
            RouteKey: sendMessage
            AuthorizationType: NONE
            OperationName: SendMessageRoute
            Target: !Join
                - "/"
                - - "integrations"
                  - !Ref SendMessageInteg
    SendMessageInteg:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            ApiId: !Ref WebSocketApiGateway
            IntegrationType: AWS_PROXY
            IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations

        #REST api
    RestApi:
        Type: AWS::ApiGatewayV2::Api
        Properties:
            Name: !Sub "${AWS::StackName}-MessengerRestApi"
            ProtocolType: HTTP


    GetUsersRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref RestApi
            RouteKey: GET /getUsers
            AuthorizationType: NONE
            OperationName: GetUsersRoute
            Target: !Join
                - "/"
                - - "integrations"
                  - !Ref GetUsersInteg
    GetUsersInteg:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            ApiId: !Ref RestApi
            IntegrationType: AWS_PROXY
            IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUsersFunction.Arn}/invocations
            PayloadFormatVersion: "1.0"

    GetConversationRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref RestApi
            RouteKey: POST /getConversation
            AuthorizationType: NONE
            OperationName: GetConversationRoute
            Target: !Join 
                - "/"
                - - "integrations"
                  - !Ref GetConversationInteg
    GetConversationInteg:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            ApiId: !Ref RestApi
            IntegrationType: AWS_PROXY
            IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetConversationFunction.Arn}/invocations
            PayloadFormatVersion: "1.0"

    # NewMessageRoute:
    #     Type: AWS::ApiGatewayV2::Route
    #     Properties:
    #         ApiId: !Ref RestApi
    #         RouteKey: POST /newmessage
    #         AuthorizationType: NONE
    #         OperationName: newMessageRoute
    #         Target: !Join 
    #             - "/"
    #             - - "integrations"
    #               - !Ref newMessageInteg
    # NewMessageInteg:
    #     Type: AWS::ApiGatewayV2::Integration
    #     Properties:
    #         ApiId: !Ref RestApi
    #         IntegrationType: AWS_PROXY
    #         IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NewMessageFunction.Arn}/invocations
    #         PayloadFormatVersion: "1.0"


    # FUNCTIONS AND PERMISSIONS
    OnConnectFunction:
        Type: AWS::Serverless::Function
        DependsOn:
            - RestApi
        Properties:
            CodeUri: src/lambda/onConnect
            Handler: app.connectHandler
            Runtime: nodejs18.x
            Layers:
                - !Ref UtilsLayer
            Environment:
                Variables:
                    CONNECTIONS_TABLE_NAME: !Ref ConnectionsTable
                    USERS_TABLE_NAME: !Ref UsersTable
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref ConnectionsTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref UsersTable
                - Statement:
                      - Effect: Allow
                        Action:
                            - "execute-api:ManageConnections"
                        Resource:
                            - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApiGateway}/*"

    OnConnectPermission:
        Type: AWS::Lambda::Permission
        DependsOn:
            - WebSocketApiGateway
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref OnConnectFunction
            Principal: apigateway.amazonaws.com

    OnDisconnectFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/lambda/onDisconnect
            Handler: app.disconnectHandler
            Runtime: nodejs18.x
            Layers:
                - !Ref UtilsLayer
            Environment:
                Variables:
                    CONNECTIONS_TABLE_NAME: !Ref ConnectionsTable
                    USERS_TABLE_NAME: !Ref UsersTable
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref ConnectionsTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref UsersTable
                - Statement:
                      - Effect: Allow
                        Action:
                            - "execute-api:ManageConnections"
                        Resource:
                            - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApiGateway}/*"
    OnDisconnectPermission:
        Type: AWS::Lambda::Permission
        DependsOn:
            - WebSocketApiGateway
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref OnDisconnectFunction
            Principal: apigateway.amazonaws.com

    PostConfirmationFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/lambda/postConfirmation
            Handler: app.postConfirmationHandler
            Runtime: nodejs18.x
            Role: !GetAtt FunctionRole.Arn
            Environment:
                Variables:
                    USERS_TABLE_NAME: !Ref UsersTable
    PostConfirmationPermissions:
        Type: AWS::Lambda::Permission
        DependsOn:
            - ServerlessRestApi
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref PostConfirmationFunction
            Principal: cognito-idp.amazonaws.com

    # Function that sends a custom verification email after the user signs up
    CustomVerificationEmailFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/lambda/customVerificationEmail
            Handler: app.customVerificationEmailHandler
            Runtime: nodejs18.x
            Role: !GetAtt FunctionRole.Arn
        # Metadata: # Manage esbuild properties
        #   BuildMethod: esbuild
        #   BuildProperties:
        #     Minify: true
        #     Target: es2020
        #     Sourcemap: true
        #     EntryPoints:
        #      - app.ts
    CustomVerificationEmailPermissions:
        Type: AWS::Lambda::Permission
        DependsOn:
            - ServerlessRestApi
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref CustomVerificationEmailFunction
            Principal: cognito-idp.amazonaws.com


    SendMessageFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/lambda/sendMessage
            Handler: app.sendMessageHandler
            Runtime: nodejs18.x
            Role: !GetAtt FunctionRole.Arn
            Environment:
                Variables:
                    CONNECTIONS_TABLE_NAME: !Ref ConnectionsTable
                    MESSAGES_TABLE_NAME: !Ref MessagesTable
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref ConnectionsTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref MessagesTab
                - Statement:
                    - Effect: Allow
                      Action:
                      - 'execute-api:ManageConnections'
                      Resource:
                      - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApiGateway}/*' 
            
    SendMessagePermissions:
        Type: AWS::Lambda::Permission
        DependsOn:
            - WebSocketApiGateway
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref SendMessageFunction
            Principal: apigateway.amazonaws.com

    AuthorizerFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/lambda/authorizer
            Handler: app.authorizerHandler
            Runtime: nodejs18.x
            Role: !GetAtt FunctionRole.Arn
    AuthorizerPermissions:
        Type: AWS::Lambda::Permission
        DependsOn:
            - WebSocketApiGateway
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref AuthorizerFunction
            Principal: apigateway.amazonaws.com

    GetUsersFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/lambda/getUsers
            Handler: app.getUsersHandler
            Runtime: nodejs18.x
            Role: !GetAtt FunctionRole.Arn
            Environment:
                Variables:
                    USERS_TABLE_NAME: !Ref UsersTable
            Policies:
                - DynamoDBCrudPolicy:
                  TableName: !Ref UsersTable
    GetUsersPermission:
        Type: AWS::Lambda::Permission
        DependsOn:
            - RestApi
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref GetUsersFunction
            Principal: apigateway.amazonaws.com

    GetConversationFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/lambda/getConversation
            Handler: app.getConversation
            Runtime: nodejs18.x
            Role: !GetAtt FunctionRole.Arn
            Environment:
                Variables:
                  CONVERSATIONS_TABLE_NAME: !Ref ConversationsTable
            Policies:
                - DynamoDBCrudPolicy:
                  TableName: !Ref ConversationTable
    GetConversationPermission:
        Type: AWS::Lambda::Permission
        DependsOn: 
            - RestApi
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref GetConversationFunction
            Principal: apigateway.amazonaws.com
    
    # NewMessageFunction:
    #     Type: AWS::Serverless::Function
    #     Properties:
    #         CodeUri: src/lambda/newMessage
    #         Handler: app.newMessage
    #         Runtime: nodejs18.x
    #         Environment:
    #             Variables:
    #               MESSAGES_TABLE_NAME: !Ref MessagesTable
    #         Policies:
    #             - DynamoDBCrudPolicy:
    #               TableName: !Ref MessagesTable
    # NewMessagePermission:
    #     Type: AWS::Lambda::Permission
    #     DependsOn: 
    #         - RestApi
    #     Properties:
    #         Action: lambdaInvokeFunction
    #         FunctionName: !Ref NewMessageFunction
    #         Principal: apigateway.amazonaws.com

          

    

    HelloWorldFunction:
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            CodeUri: src/
            Handler: app.lambdaHandler
            Runtime: nodejs18.x
            Architectures:
                - x86_64
            AutoPublishAlias: live
            DeploymentPreference:
                Type: Canary10Percent5Minutes
            Events:
                HelloWorld:
                    Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
                    Properties:
                        Path: /hello
                        Method: get
        Metadata: # Manage esbuild properties
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: es2020
                Sourcemap: true
                EntryPoints:
                    - app.ts

    # DYNAMODB TABLES
    UsersTable:
        Type: AWS::DynamoDB::Table
        Properties:
            AttributeDefinitions:
                - AttributeName: cognitoid
                  AttributeType: S
            KeySchema:
                - AttributeName: cognitoid
                  KeyType: HASH
            BillingMode: PAY_PER_REQUEST
    ConnectionsTable:
        Type: AWS::DynamoDB::Table
        Properties:
            AttributeDefinitions:
                - AttributeName: connectionId
                  AttributeType: S
                - AttributeName: cognitoid
                  AttributeType: S
            KeySchema:
                - AttributeName: connectionId
                  KeyType: HASH
            GlobalSecondaryIndexes:
                - IndexName: cognitoid-index
                  KeySchema:
                      - AttributeName: cognitoid
                        KeyType: HASH
                  Projection:
                      ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
    ConversationsTable:
        Type: AWS::DynamoDB::Table
        Properties:
          AttributeDefinitions:
            - AttributeName: conversationId
              AttributeType: S  
          KeySchema:
            - AttributeName: conversationId
              KeyType: HASH
          BillingMode: PAY_PER_REQUEST
    MessagesTable:
        Type: AWS::DynamoDB::Table
        Properties:
            AttributeDefinitions:
              - AttributeName: conversationId
                AttributeType: S
              - AttributeName: timestamp
                AttributeType: S
            KeySchema:
                - AttributeName: conversationId
                  KeyType: HASH
                - AttributeName: timestamp
                  KeyType: RANGE   
            BillingMode: PAY_PER_REQUEST
        

    FunctionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: lambda.amazonaws.com
                      Action: sts:AssumeRole
            Policies:
                - PolicyName: DynamoDBAccess
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - dynamodb:PutItem
                                - dynamodb:GetItem
                                - dynamodb:Scan
                                - logs:CreateLogGroup
                                - logs:CreateLogStream
                                - logs:PutLogEvents
                                - lambda:InvokeFunction
                            Resource: "*"

    # Layers
    UtilsLayer:
        Type: AWS::Serverless::LayerVersion
        Properties:
          ContentUri: src/utils/
          LayerName: UtilsLayer
          Description: Layer that contains utility functions
          CompatibleRuntimes:
            - "nodejs18.x"


    ApplicationResourceGroup:
        Type: AWS::ResourceGroups::Group
        Properties:
            Name:
                Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
            ResourceQuery:
                Type: CLOUDFORMATION_STACK_1_0
    ApplicationInsightsMonitoring:
        Type: AWS::ApplicationInsights::Application
        Properties:
            ResourceGroupName:
                Ref: ApplicationResourceGroup
            AutoConfigurationEnabled: "true"

Outputs:
    # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
    # Find out more about other implicit resources you can reference within SAM
    # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
    HelloWorldApi:
        Description: API Gateway endpoint URL for Prod stage for Hello World function
        Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
    HelloWorldFunction:
        Description: Hello World Lambda Function ARN
        Value: !GetAtt HelloWorldFunction.Arn
    HelloWorldFunctionIamRole:
        Description: Implicit IAM Role created for Hello World function
        Value: !GetAtt HelloWorldFunctionRole.Arn
    WebSocketApiEndpoint:
        Description: WebSocket API endpoint URL
        Value: !Sub "wss://${WebSocketApiGateway}.execute-api.${AWS::Region}.amazonaws.com/"
    GetUsersEndpoint:
        Description: Get Users API endpoint URL
        Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/dev/getUsers"
    GetConversationEndPoint:
        Description: Get Conversation API endpoint
        Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/dev/getConversation"
    OnConnectFunctionArn:
        Description: "OnConnect function ARN"
        Value: !GetAtt OnConnectFunction.Arn
    GetUsersFunctionArn:
        Description: Get Users Function ARN
        Value: !GetAtt GetUsersFunction.Arn
    SendMessageFunction:
        Description: Send Message Function ARN
        Value: !GetAtt SendMessageFunction.Arn

    UserPoolId:
        Description: Messenger userpool ID
        Value: !Ref UserPool
    UserPoolClientId:
        Description: Messenger userpool client ID
        Value: !Ref UserPoolClient
    PostConfirmationFunction:
        Description: Function that runs after the confirmation step of cognito sign up
        Value: !Ref PostConfirmationFunction
    CustomVerificationEmailFunction:
        Description: Function that sends custom verification email with link including code
        Value: !Ref CustomVerificationEmailFunction
